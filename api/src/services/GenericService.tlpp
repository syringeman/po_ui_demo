#Include 'tlpp-core.th'

Namespace TotvsDevelopers.Demo.Services

Using Namespace TotvsDevelopers.Demo.Adapters

Class GenericService From BaseService
    Private Data _oGenericAdapter
    Private Data _cTable
    Private Data _nOrder
    Private Data _cModel 
    Private Data _cMasterModel
    Private Data _cQuery
    Private Data _cWhere
    Private Data _cOrder

  	Public Method New()
	Public Method GetPage( nCurrentPage As Numeric, nPageSize As Numeric )
    Public Method FindById( cId As Character ) As Json
    Public Method SaveOrUpdate(jData, cId ) As Json
    Public Method Remove() As Json
EndClass

Method New(cTable as Character, nOrder as Numeric, cModel as Character, cMasterModel as Character, ;
                cQuery as Character, cWhere as Character, cOrder as Character) CLASS GenericService
    default cTable       := ''
    default nOrder       := 1
    default cModel       := ''
    default cMasterModel := ''
    default cQuery       := ''
    default cWhere       := ''
    default cOrder       := ''

	_Super:New()
    Self:_cTable        := cTable
    Self:_nOrder        := nOrder
    Self:_cModel        := cModel
    Self:_cMasterModel  := cMasterModel
    Self:_cQuery        := cQuery
    Self:_cWhere        := cWhere
    Self:_cOrder        := cOrder
return

Method GetPage( nCurrentPage As Numeric, nPageSize As Numeric ) Class GenericService
    Local jResult  := JsonObject():New()

    Default nCurrentPage := 1
    Default nPageSize    := 10
    Default cQuery       := ''

    Self:_oGenericAdapter := GenericAdapter():New()
    Self:_oGenericAdapter:setQuery(Self:_cQuery)
    Self:_oGenericAdapter:setWhere(Self:_cWhere)
	Self:_oGenericAdapter:setOrder(Self:_cOrder)
    Self:_oGenericAdapter:BuildPage( nCurrentPage, nPageSize )

    If ( Self:_oGenericAdapter:lOk )
        jResult['succes'] := .T.
        jResult['result'] := Self:_oGenericAdapter:GetJSONResponse()
    Else
        jResult['succes'] := .F.
        jResult['result'] := JsonObject():New(0)
        jResult['result']['code'] := Self:_oGenericAdapter:GetCode()
        jResult['result']['message'] := "Erro ao consultar os dados"
        jResult['result']['detailedMessage'] := Self:_oGenericAdapter:GetMessage()
    EndIf
Return jResult

Method FindById( cId As Character ) As Json Class GenericService
    Local aArea    := FWGetArea()
    Local aAreaGen := &(Self:_cTable+'->( FWGetArea()')
    Local jResult  := JsonObject():New()

    jResult['result'] := JsonObject():New()

    DbSelectArea(Self:_cTable)
    DbSetOrder(Self:_nOrder)

    If ( MsSeek( FWXFilial(Self:_cTable)+cId ) )
        jResult['success'] := .T.
        /*jResult['result']["id"] := AllTrim( SB1->B1_COD )
        jResult['result']["description"] := AllTrim( SB1->B1_DESC )
        jResult['result']["group"] := AllTrim( SB1->B1_GRUPO )
        jResult['result']["groupDescription"] := AllTrim( Posicione("SBM", 1, FWXFilial("SBM")+SB1->B1_COD, "BM_DESC") )
        jResult['result']['um'] := AllTrim( SB1->B1_UM )
        jResult['result']['kind'] := AllTrim( SB1->B1_TIPO )
        jResult['result']['warehouse'] := AllTrim( SB1->B1_LOCPAD )*/
    Else
        jResult['success'] := .F.
        jResult['result']['code'] := 404
        jResult['result']['message'] := "Registro não encontrado"
        jResult['result']['detailedMessage'] := "O Registro " + cId + " não foi encontrado"
    EndIf

    FWRestArea( aAreaGen )
    FWRestArea( aArea )
Return jResult

Method SaveOrUpdate(jData, cId ) As Json Class GenericService
    Local aArea    := FWGetArea()
    Local aAreaGen := &(Self:_cTable+'->( FWGetArea()')
    Local oModel   := FWLoadModel(Self:_cModel)
    Local oGenMod  := oModel:GetModel(Self:_cMasterModel)
    Local jResult  := JsonObject():New()
    Local nCont    := 1

    jResult['result'] := JsonObject():New()

    Default aValues := {}

    If Empty( cId )
        oModel:SetOperation( 3 )
    Else
        DbSelectArea(Self:_cTable)
        DbSetOrder(Self:_nOrder)
        MsSeek( FWXFilial(Self:_cTable)+cId )
        oModel:SetOperation( 4 )
    EndIf

    oModel:Activate()

    for nCont := 1 to len(aValues)
        oGenMod:SetValue(Upper(Alltrim(aValues[nCont][1])),Upper(Alltrim(aValues[nCont][2])))
    next nCont

    If ( oModel:VldData() .And. oModel:CommitData())
        jResult['success'] := .T.
        jResult['result']['message'] := 'Registro salvo com sucesso'
    Else
        jResult['success'] := .F.
        jResult['result']['code'] := 400
        jResult['result']['message'] := "Erro ao salvar o Registro"
        jResult['result']['detailedMessage'] := Self:_HandleErrorMessage(  oModel:GetErrorMessage() )
    EndIf

    oModel:DeActivate()

    FWRestArea( aAreaGen )
    FWRestArea( aArea )
Return jResult

Method Remove(cIndexField as Character, cId As Character ) As Json Class GenericService
    Local aArea    := FWGetArea()
    Local aAreaGen := &(Self:_cTable+'->( FWGetArea()')
    Local oModel   := FWLoadModel(Self:_cModel)
    Local jResult  := JsonObject():New()
    Local aFields  := { {cIndexField, cId, Nil } }

    DbSelectArea(Self:_cTable)
    DbSetOrder(Self:_nOrder)
    MsSeek( FWXFilial(Self:_cTable)+cId )

    jResult['result'] := JsonObject():New()

    If ( FWMVCRotAuto(oModel, Self:_cTable, 5, {{Self:_cMasterModel, aFields}} ,,.T.) )
        jResult['success'] := .T.
        jResult['result']['message'] := 'Registro excluído com sucesso'
    Else
        jResult['success'] := .F.
        jResult['result']['code'] := 400
        jResult['result']['message'] := "Erro ao excluir o Registro"
        jResult['result']['detailedMessage'] := Self:_HandleErrorMessage(  oModel:GetErrorMessage() )
    EndIf

    oModel:DeActivate()

    FWRestArea( aAreaGen )
    FWRestArea( aArea )
Return jResult
